/* This file was automatically generated by ./gen_api_header.tcl. */

/*
 Copyright (c) 2008, 2009 Apple Inc.
 
 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation files
 (the "Software"), to deal in the Software without restriction,
 including without limitation the rights to use, copy, modify, merge,
 publish, distribute, sublicense, and/or sell copies of the Software,
 and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:
 
 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
 HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
 
 Except as contained in this notice, the name(s) of the above
 copyright holders shall not be used in advertising or otherwise to
 promote the sale, use or other dealings in this Software without
 prior written authorization.
*/


#ifndef APPLE_XGL_API_H
#define APPLE_XGL_API_H

struct apple_xgl_api {
	void (*Accum)(GLenum op, GLfloat value);
	void (*ActiveStencilFaceEXT)(GLenum face);
	void (*ActiveTexture)(GLenum texture);
	void (*ActiveTextureARB)(GLenum texture);
	void (*AlphaFunc)(GLenum func, GLclampf ref);
	GLboolean (*AreTexturesResident)(GLsizei n, const GLuint * textures, GLboolean * residences);
	void (*ArrayElement)(GLint i);
	void (*AttachObjectARB)(GLhandleARB containerObj, GLhandleARB obj);
	void (*AttachShader)(GLuint program, GLuint shader);
	void (*Begin)(GLenum mode);
	void (*BeginQuery)(GLenum target, GLuint id);
	void (*BeginQueryARB)(GLenum target, GLuint id);
	void (*BindAttribLocation)(GLuint program, GLuint index, const GLchar * name);
	void (*BindAttribLocationARB)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
	void (*BindBuffer)(GLenum target, GLuint buffer);
	void (*BindBufferARB)(GLenum target, GLuint buffer);
	void (*BindFramebufferEXT)(GLenum target, GLuint framebuffer);
	void (*BindProgramARB)(GLenum target, GLuint program);
	void (*BindRenderbufferEXT)(GLenum target, GLuint renderbuffer);
	void (*BindTexture)(GLenum target, GLuint texture);
	void (*BindVertexArrayAPPLE)(GLuint array);
	void (*Bitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
	void (*BlendColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*BlendColorEXT)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*BlendEquation)(GLenum mode);
	void (*BlendEquationEXT)(GLenum mode);
	void (*BlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
	void (*BlendEquationSeparateEXT)(GLenum modeRGB, GLenum modeAlpha);
	void (*BlendFunc)(GLenum sfactor, GLenum dfactor);
	void (*BlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void (*BlendFuncSeparateEXT)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void (*BlitFramebufferEXT)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	void (*BufferData)(GLenum target, GLsizeiptr size, const const GLvoid * data, GLenum usage);
	void (*BufferDataARB)(GLenum target, GLsizeiptrARB size, const const GLvoid * data, GLenum usage);
	void (*BufferParameteriAPPLE)(GLenum target, GLenum pname, GLint param);
	void (*BufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const const GLvoid * data);
	void (*BufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const const GLvoid * data);
	void (*CallList)(GLuint list);
	void (*CallLists)(GLsizei n, GLenum type, const void * lists);
	GLenum (*CheckFramebufferStatusEXT)(GLenum target);
	void (*Clear)(GLbitfield mask);
	void (*ClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void (*ClearColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*ClearDepth)(GLclampd depth);
	void (*ClearIndex)(GLfloat c);
	void (*ClearStencil)(GLint s);
	void (*ClientActiveTexture)(GLenum texture);
	void (*ClientActiveTextureARB)(GLenum texture);
	void (*ClipPlane)(GLenum plane, const GLdouble * equation);
	void (*Color3b)(GLbyte red, GLbyte green, GLbyte blue);
	void (*Color3bv)(const GLbyte * v);
	void (*Color3d)(GLdouble red, GLdouble green, GLdouble blue);
	void (*Color3dv)(const GLdouble * v);
	void (*Color3f)(GLfloat red, GLfloat green, GLfloat blue);
	void (*Color3fv)(const GLfloat * v);
	void (*Color3i)(GLint red, GLint green, GLint blue);
	void (*Color3iv)(const GLint * v);
	void (*Color3s)(GLshort red, GLshort green, GLshort blue);
	void (*Color3sv)(const GLshort * v);
	void (*Color3ub)(GLubyte red, GLubyte green, GLubyte blue);
	void (*Color3ubv)(const GLubyte * v);
	void (*Color3ui)(GLuint red, GLuint green, GLuint blue);
	void (*Color3uiv)(const GLuint * v);
	void (*Color3us)(GLushort red, GLushort green, GLushort blue);
	void (*Color3usv)(const GLushort * v);
	void (*Color4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	void (*Color4bv)(const GLbyte * v);
	void (*Color4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	void (*Color4dv)(const GLdouble * v);
	void (*Color4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void (*Color4fv)(const GLfloat * v);
	void (*Color4i)(GLint red, GLint green, GLint blue, GLint alpha);
	void (*Color4iv)(const GLint * v);
	void (*Color4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
	void (*Color4sv)(const GLshort * v);
	void (*Color4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	void (*Color4ubv)(const GLubyte * v);
	void (*Color4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
	void (*Color4uiv)(const GLuint * v);
	void (*Color4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
	void (*Color4usv)(const GLushort * v);
	void (*ColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void (*ColorMaterial)(GLenum face, GLenum mode);
	void (*ColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	void (*ColorSubTable)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
	void (*ColorTable)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
	void (*ColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
	void (*ColorTableParameteriv)(GLenum target, GLenum pname, const GLint * params);
	void (*CompileShader)(GLuint shader);
	void (*CompileShaderARB)(GLhandleARB shaderObj);
	void (*CompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
	void (*CompressedTexImage1DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
	void (*CompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
	void (*CompressedTexImage2DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
	void (*CompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
	void (*CompressedTexImage3DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
	void (*CompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
	void (*CompressedTexSubImage1DARB)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
	void (*CompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
	void (*CompressedTexSubImage2DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
	void (*CompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
	void (*CompressedTexSubImage3DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
	void (*ConvolutionFilter1D)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
	void (*ConvolutionFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
	void (*ConvolutionParameterf)(GLenum target, GLenum pname, GLfloat params);
	void (*ConvolutionParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
	void (*ConvolutionParameteri)(GLenum target, GLenum pname, GLint params);
	void (*ConvolutionParameteriv)(GLenum target, GLenum pname, const GLint * params);
	void (*CopyColorSubTable)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
	void (*CopyColorTable)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*CopyConvolutionFilter1D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*CopyConvolutionFilter2D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	void (*CopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	void (*CopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void (*CopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void (*CopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	GLuint (*CreateProgram)();
	GLhandleARB (*CreateProgramObjectARB)();
	GLuint (*CreateShader)(GLenum type);
	GLhandleARB (*CreateShaderObjectARB)(GLenum shaderType);
	void (*CullFace)(GLenum mode);
	void (*DeleteBuffers)(GLsizei n, const const GLuint * buffers);
	void (*DeleteBuffersARB)(GLsizei n, const const GLuint * buffers);
	void (*DeleteFramebuffersEXT)(GLsizei n, const GLuint * framebuffers);
	void (*DeleteLists)(GLuint list, GLsizei range);
	void (*DeleteObjectARB)(GLhandleARB obj);
	void (*DeleteProgram)(GLuint program);
	void (*DeleteProgramsARB)(GLsizei n, const GLuint * programs);
	void (*DeleteQueries)(GLsizei n, const GLuint * ids);
	void (*DeleteQueriesARB)(GLsizei n, const GLuint * ids);
	void (*DeleteRenderbuffersEXT)(GLsizei n, const GLuint * renderbuffers);
	void (*DeleteShader)(GLuint shader);
	void (*DeleteTextures)(GLsizei n, const GLuint * textures);
	void (*DeleteVertexArraysAPPLE)(GLsizei n, const GLuint * arrays);
	void (*DepthFunc)(GLenum func);
	void (*DepthMask)(GLboolean flag);
	void (*DepthRange)(GLclampd near, GLclampd far);
	void (*DetachObjectARB)(GLhandleARB containerObj, GLhandleARB attachedObj);
	void (*DetachShader)(GLuint program, GLuint shader);
	void (*Disable)(GLenum cap);
	void (*DisableClientState)(GLenum array);
	void (*DisableVertexAttribArray)(GLuint index);
	void (*DisableVertexAttribArrayARB)(GLuint index);
	void (*DrawArrays)(GLenum mode, GLint first, GLsizei count);
	void (*DrawBuffer)(GLenum mode);
	void (*DrawBuffers)(GLsizei n, const GLenum * bufs);
	void (*DrawBuffersARB)(GLsizei n, const GLenum * bufs);
	void (*DrawElementArrayAPPLE)(GLenum mode, GLint first, GLsizei count);
	void (*DrawElements)(GLenum mode, GLsizei count, GLenum type, const void * indices);
	void (*DrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
	void (*DrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
	void (*DrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
	void (*DrawRangeElementsEXT)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
	void (*EdgeFlag)(GLboolean flag);
	void (*EdgeFlagPointer)(GLsizei stride, const void * pointer);
	void (*EdgeFlagv)(const GLboolean * flag);
	void (*ElementPointerAPPLE)(GLenum type, const void * pointer);
	void (*Enable)(GLenum cap);
	void (*EnableClientState)(GLenum array);
	void (*EnableVertexAttribArray)(GLuint index);
	void (*EnableVertexAttribArrayARB)(GLuint index);
	void (*End)();
	void (*EndList)();
	void (*EndQuery)(GLenum target);
	void (*EndQueryARB)(GLenum target);
	void (*EvalCoord1d)(GLdouble u);
	void (*EvalCoord1dv)(const GLdouble * u);
	void (*EvalCoord1f)(GLfloat u);
	void (*EvalCoord1fv)(const GLfloat * u);
	void (*EvalCoord2d)(GLdouble u, GLdouble v);
	void (*EvalCoord2dv)(const GLdouble * u);
	void (*EvalCoord2f)(GLfloat u, GLfloat v);
	void (*EvalCoord2fv)(const GLfloat * u);
	void (*EvalMesh1)(GLenum mode, GLint i1, GLint i2);
	void (*EvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	void (*EvalPoint1)(GLint i);
	void (*EvalPoint2)(GLint i, GLint j);
	void (*FeedbackBuffer)(GLsizei size, GLenum type, GLfloat * buffer);
	void (*Finish)();
	void (*Flush)();
	void (*FlushMappedBufferRangeAPPLE)(GLenum target, GLintptr offset, GLsizeiptr size);
	void (*FogCoordd)(GLdouble coord);
	void (*FogCoorddEXT)(GLdouble coord);
	void (*FogCoorddv)(const GLdouble * coord);
	void (*FogCoorddvEXT)(const GLdouble * coord);
	void (*FogCoordf)(GLfloat coord);
	void (*FogCoordfEXT)(GLfloat coord);
	void (*FogCoordfv)(const GLfloat * coord);
	void (*FogCoordfvEXT)(const GLfloat * coord);
	void (*FogCoordPointer)(GLenum type, GLsizei stride, const void * pointer);
	void (*FogCoordPointerEXT)(GLenum type, GLsizei stride, const void * pointer);
	void (*Fogf)(GLenum pname, GLfloat param);
	void (*Fogfv)(GLenum pname, const GLfloat * params);
	void (*Fogi)(GLenum pname, GLint param);
	void (*Fogiv)(GLenum pname, const GLint * params);
	void (*FramebufferRenderbufferEXT)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void (*FramebufferTexture1DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*FramebufferTexture2DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*FramebufferTexture3DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	void (*FrontFace)(GLenum mode);
	void (*Frustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void (*GenBuffers)(GLsizei n, GLuint * buffers);
	void (*GenBuffersARB)(GLsizei n, GLuint * buffers);
	void (*GenerateMipmapEXT)(GLenum target);
	void (*GenFramebuffersEXT)(GLsizei n, GLuint * framebuffers);
	GLuint (*GenLists)(GLsizei range);
	void (*GenProgramsARB)(GLsizei n, GLuint * programs);
	void (*GenQueries)(GLsizei n, GLuint * ids);
	void (*GenQueriesARB)(GLsizei n, GLuint * ids);
	void (*GenRenderbuffersEXT)(GLsizei n, GLuint * renderbuffers);
	void (*GenTextures)(GLsizei n, GLuint * textures);
	void (*GenVertexArraysAPPLE)(GLsizei n, GLuint * arrays);
	void (*GetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	void (*GetActiveAttribARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
	void (*GetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	void (*GetActiveUniformARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
	void (*GetAttachedObjectsARB)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
	void (*GetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * obj);
	GLint (*GetAttribLocation)(GLuint program, const GLchar * name);
	GLint (*GetAttribLocationARB)(GLhandleARB programObj, const GLcharARB * name);
	void (*GetBooleanv)(GLenum pname, GLboolean * params);
	void (*GetBufferParameteriv)(GLenum target, GLenum pname, GLint * params);
	void (*GetBufferParameterivARB)(GLenum target, GLenum pname, GLint * params);
	void (*GetBufferPointerv)(GLenum target, GLenum pname, void * * params);
	void (*GetBufferPointervARB)(GLenum target, GLenum pname, void * * params);
	void (*GetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
	void (*GetBufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
	void (*GetClipPlane)(GLenum plane, GLdouble * equation);
	void (*GetColorTable)(GLenum target, GLenum format, GLenum type, void * table);
	void (*GetColorTableParameterfv)(GLenum target, GLenum pname, GLfloat * params);
	void (*GetColorTableParameteriv)(GLenum target, GLenum pname, GLint * params);
	void (*GetCompressedTexImage)(GLenum target, GLint level, void * img);
	void (*GetCompressedTexImageARB)(GLenum target, GLint level, void * img);
	void (*GetConvolutionFilter)(GLenum target, GLenum format, GLenum type, void * image);
	void (*GetConvolutionParameterfv)(GLenum target, GLenum pname, GLfloat * params);
	void (*GetConvolutionParameteriv)(GLenum target, GLenum pname, GLint * params);
	void (*GetDoublev)(GLenum pname, GLdouble * params);
	GLenum (*GetError)();
	void (*GetFloatv)(GLenum pname, GLfloat * params);
	void (*GetFramebufferAttachmentParameterivEXT)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
	GLhandleARB (*GetHandleARB)(GLenum pname);
	void (*GetHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
	void (*GetHistogramParameterfv)(GLenum target, GLenum pname, GLfloat * params);
	void (*GetHistogramParameteriv)(GLenum target, GLenum pname, GLint * params);
	void (*GetInfoLogARB)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
	void (*GetIntegerv)(GLenum pname, GLint * params);
	void (*GetLightfv)(GLenum light, GLenum pname, GLfloat * params);
	void (*GetLightiv)(GLenum light, GLenum pname, GLint * params);
	void (*GetMapdv)(GLenum target, GLenum query, GLdouble * v);
	void (*GetMapfv)(GLenum target, GLenum query, GLfloat * v);
	void (*GetMapiv)(GLenum target, GLenum query, GLint * v);
	void (*GetMaterialfv)(GLenum face, GLenum pname, GLfloat * params);
	void (*GetMaterialiv)(GLenum face, GLenum pname, GLint * params);
	void (*GetMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
	void (*GetMinmaxParameterfv)(GLenum target, GLenum pname, GLfloat * params);
	void (*GetMinmaxParameteriv)(GLenum target, GLenum pname, GLint * params);
	void (*GetObjectParameterfvARB)(GLhandleARB obj, GLenum pname, GLfloat * params);
	void (*GetObjectParameterivARB)(GLhandleARB obj, GLenum pname, GLint * params);
	void (*GetPixelMapfv)(GLenum map, GLfloat * values);
	void (*GetPixelMapuiv)(GLenum map, GLuint * values);
	void (*GetPixelMapusv)(GLenum map, GLushort * values);
	void (*GetPointerv)(GLenum pname, void * * params);
	void (*GetPolygonStipple)(GLubyte * mask);
	void (*GetProgramEnvParameterdvARB)(GLenum target, GLuint index, GLdouble * params);
	void (*GetProgramEnvParameterfvARB)(GLenum target, GLuint index, GLfloat * params);
	void (*GetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	void (*GetProgramiv)(GLuint program, GLenum pname, GLint * params);
	void (*GetProgramivARB)(GLenum target, GLenum pname, GLint * params);
	void (*GetProgramLocalParameterdvARB)(GLenum target, GLuint index, GLdouble * params);
	void (*GetProgramLocalParameterfvARB)(GLenum target, GLuint index, GLfloat * params);
	void (*GetProgramStringARB)(GLenum target, GLenum pname, void * string);
	void (*GetQueryiv)(GLenum target, GLenum pname, GLint * params);
	void (*GetQueryivARB)(GLenum target, GLenum pname, GLint * params);
	void (*GetQueryObjectiv)(GLuint id, GLenum pname, GLint * params);
	void (*GetQueryObjectivARB)(GLuint id, GLenum pname, GLint * params);
	void (*GetQueryObjectuiv)(GLuint id, GLenum pname, GLuint * params);
	void (*GetQueryObjectuivARB)(GLuint id, GLenum pname, GLuint * params);
	void (*GetRenderbufferParameterivEXT)(GLenum target, GLenum pname, GLint * params);
	void (*GetSeparableFilter)(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
	void (*GetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	void (*GetShaderiv)(GLuint shader, GLenum pname, GLint * params);
	void (*GetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
	void (*GetShaderSourceARB)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
	const GLubyte * (*GetString)(GLenum name);
	void (*GetTexEnvfv)(GLenum target, GLenum pname, GLfloat * params);
	void (*GetTexEnviv)(GLenum target, GLenum pname, GLint * params);
	void (*GetTexGendv)(GLenum coord, GLenum pname, GLdouble * params);
	void (*GetTexGenfv)(GLenum coord, GLenum pname, GLfloat * params);
	void (*GetTexGeniv)(GLenum coord, GLenum pname, GLint * params);
	void (*GetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
	void (*GetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat * params);
	void (*GetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint * params);
	void (*GetTexParameterfv)(GLenum target, GLenum pname, GLfloat * params);
	void (*GetTexParameteriv)(GLenum target, GLenum pname, GLint * params);
	void (*GetUniformfv)(GLuint program, GLint location, GLfloat * params);
	void (*GetUniformfvARB)(GLhandleARB programObj, GLint location, GLfloat * params);
	void (*GetUniformiv)(GLuint program, GLint location, GLint * params);
	void (*GetUniformivARB)(GLhandleARB programObj, GLint location, GLint * params);
	GLint (*GetUniformLocation)(GLuint program, const GLchar * name);
	GLint (*GetUniformLocationARB)(GLhandleARB programObj, const GLcharARB * name);
	void (*GetVertexAttribdv)(GLuint index, GLenum pname, GLdouble * params);
	void (*GetVertexAttribdvARB)(GLuint index, GLenum pname, GLdouble * params);
	void (*GetVertexAttribfv)(GLuint index, GLenum pname, GLfloat * params);
	void (*GetVertexAttribfvARB)(GLuint index, GLenum pname, GLfloat * params);
	void (*GetVertexAttribiv)(GLuint index, GLenum pname, GLint * params);
	void (*GetVertexAttribivARB)(GLuint index, GLenum pname, GLint * params);
	void (*GetVertexAttribPointerv)(GLuint index, GLenum pname, void * * pointer);
	void (*GetVertexAttribPointervARB)(GLuint index, GLenum pname, void * * pointer);
	void (*Hint)(GLenum target, GLenum mode);
	void (*Histogram)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
	void (*Indexd)(GLdouble c);
	void (*Indexdv)(const GLdouble * c);
	void (*Indexf)(GLfloat c);
	void (*Indexfv)(const GLfloat * c);
	void (*Indexi)(GLint c);
	void (*Indexiv)(const GLint * c);
	void (*IndexMask)(GLuint mask);
	void (*IndexPointer)(GLenum type, GLsizei stride, const void * pointer);
	void (*Indexs)(GLshort c);
	void (*Indexsv)(const GLshort * c);
	void (*Indexub)(GLubyte c);
	void (*Indexubv)(const GLubyte * c);
	void (*InitNames)();
	void (*InterleavedArrays)(GLenum format, GLsizei stride, const void * pointer);
	GLboolean (*IsBuffer)(GLuint buffer);
	GLboolean (*IsBufferARB)(GLuint buffer);
	GLboolean (*IsEnabled)(GLenum cap);
	GLboolean (*IsFramebufferEXT)(GLuint framebuffer);
	GLboolean (*IsList)(GLuint list);
	GLboolean (*IsProgram)(GLuint program);
	GLboolean (*IsProgramARB)(GLuint program);
	GLboolean (*IsQuery)(GLuint id);
	GLboolean (*IsQueryARB)(GLuint id);
	GLboolean (*IsRenderbufferEXT)(GLuint renderbuffer);
	GLboolean (*IsShader)(GLuint shader);
	GLboolean (*IsTexture)(GLuint texture);
	GLboolean (*IsVertexArrayAPPLE)(GLuint array);
	void (*Lightf)(GLenum light, GLenum pname, GLfloat param);
	void (*Lightfv)(GLenum light, GLenum pname, const GLfloat * params);
	void (*Lighti)(GLenum light, GLenum pname, GLint param);
	void (*Lightiv)(GLenum light, GLenum pname, const GLint * params);
	void (*LightModelf)(GLenum pname, GLfloat param);
	void (*LightModelfv)(GLenum pname, const GLfloat * params);
	void (*LightModeli)(GLenum pname, GLint param);
	void (*LightModeliv)(GLenum pname, const GLint * params);
	void (*LineStipple)(GLint factor, GLushort pattern);
	void (*LineWidth)(GLfloat width);
	void (*LinkProgram)(GLuint program);
	void (*LinkProgramARB)(GLhandleARB programObj);
	void (*ListBase)(GLuint base);
	void (*LoadIdentity)();
	void (*LoadMatrixd)(const GLdouble * m);
	void (*LoadMatrixf)(const GLfloat * m);
	void (*LoadName)(GLuint name);
	void (*LoadTransposeMatrixd)(const GLdouble * m);
	void (*LoadTransposeMatrixdARB)(const GLdouble * m);
	void (*LoadTransposeMatrixf)(const GLfloat * m);
	void (*LoadTransposeMatrixfARB)(const GLfloat * m);
	void (*LockArraysEXT)(GLint first, GLsizei count);
	void (*LogicOp)(GLenum opcode);
	void (*Map1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
	void (*Map1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
	void (*Map2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
	void (*Map2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
	void * (*MapBuffer)(GLenum target, GLenum access);
	void * (*MapBufferARB)(GLenum target, GLenum access);
	void (*MapGrid1d)(GLint un, GLdouble u1, GLdouble u2);
	void (*MapGrid1f)(GLint un, GLfloat u1, GLfloat u2);
	void (*MapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	void (*MapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	void (*Materialf)(GLenum face, GLenum pname, GLfloat param);
	void (*Materialfv)(GLenum face, GLenum pname, const GLfloat * params);
	void (*Materiali)(GLenum face, GLenum pname, GLint param);
	void (*Materialiv)(GLenum face, GLenum pname, const GLint * params);
	void (*MatrixMode)(GLenum mode);
	void (*Minmax)(GLenum target, GLenum internalformat, GLboolean sink);
	void (*MultiDrawArrays)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
	void (*MultiDrawArraysEXT)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
	void (*MultiDrawElementArrayAPPLE)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
	void (*MultiDrawElements)(GLenum mode, const GLsizei * count, GLenum type, const void * * indices, GLsizei primcount);
	void (*MultiDrawElementsEXT)(GLenum mode, const GLsizei * count, GLenum type, const void * * indices, GLsizei primcount);
	void (*MultiDrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount);
	void (*MultiTexCoord1d)(GLenum target, GLdouble s);
	void (*MultiTexCoord1dARB)(GLenum target, GLdouble s);
	void (*MultiTexCoord1dv)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord1dvARB)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord1f)(GLenum target, GLfloat s);
	void (*MultiTexCoord1fARB)(GLenum target, GLfloat s);
	void (*MultiTexCoord1fv)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord1fvARB)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord1i)(GLenum target, GLint s);
	void (*MultiTexCoord1iARB)(GLenum target, GLint s);
	void (*MultiTexCoord1iv)(GLenum target, const GLint * v);
	void (*MultiTexCoord1ivARB)(GLenum target, const GLint * v);
	void (*MultiTexCoord1s)(GLenum target, GLshort s);
	void (*MultiTexCoord1sARB)(GLenum target, GLshort s);
	void (*MultiTexCoord1sv)(GLenum target, const GLshort * v);
	void (*MultiTexCoord1svARB)(GLenum target, const GLshort * v);
	void (*MultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
	void (*MultiTexCoord2dARB)(GLenum target, GLdouble s, GLdouble t);
	void (*MultiTexCoord2dv)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord2dvARB)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
	void (*MultiTexCoord2fARB)(GLenum target, GLfloat s, GLfloat t);
	void (*MultiTexCoord2fv)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord2fvARB)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord2i)(GLenum target, GLint s, GLint t);
	void (*MultiTexCoord2iARB)(GLenum target, GLint s, GLint t);
	void (*MultiTexCoord2iv)(GLenum target, const GLint * v);
	void (*MultiTexCoord2ivARB)(GLenum target, const GLint * v);
	void (*MultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
	void (*MultiTexCoord2sARB)(GLenum target, GLshort s, GLshort t);
	void (*MultiTexCoord2sv)(GLenum target, const GLshort * v);
	void (*MultiTexCoord2svARB)(GLenum target, const GLshort * v);
	void (*MultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*MultiTexCoord3dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*MultiTexCoord3dv)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord3dvARB)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*MultiTexCoord3fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*MultiTexCoord3fv)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord3fvARB)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
	void (*MultiTexCoord3iARB)(GLenum target, GLint s, GLint t, GLint r);
	void (*MultiTexCoord3iv)(GLenum target, const GLint * v);
	void (*MultiTexCoord3ivARB)(GLenum target, const GLint * v);
	void (*MultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
	void (*MultiTexCoord3sARB)(GLenum target, GLshort s, GLshort t, GLshort r);
	void (*MultiTexCoord3sv)(GLenum target, const GLshort * v);
	void (*MultiTexCoord3svARB)(GLenum target, const GLshort * v);
	void (*MultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*MultiTexCoord4dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*MultiTexCoord4dv)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord4dvARB)(GLenum target, const GLdouble * v);
	void (*MultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*MultiTexCoord4fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*MultiTexCoord4fv)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord4fvARB)(GLenum target, const GLfloat * v);
	void (*MultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*MultiTexCoord4iARB)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*MultiTexCoord4iv)(GLenum target, const GLint * v);
	void (*MultiTexCoord4ivARB)(GLenum target, const GLint * v);
	void (*MultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*MultiTexCoord4sARB)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*MultiTexCoord4sv)(GLenum target, const GLshort * v);
	void (*MultiTexCoord4svARB)(GLenum target, const GLshort * v);
	void (*MultMatrixd)(const GLdouble * m);
	void (*MultMatrixf)(const GLfloat * m);
	void (*MultTransposeMatrixd)(const GLdouble * m);
	void (*MultTransposeMatrixdARB)(const GLdouble * m);
	void (*MultTransposeMatrixf)(const GLfloat * m);
	void (*MultTransposeMatrixfARB)(const GLfloat * m);
	void (*NewList)(GLuint list, GLuint mode);
	void (*Normal3b)(GLbyte nx, GLbyte ny, GLbyte nz);
	void (*Normal3bv)(const GLbyte * v);
	void (*Normal3d)(GLdouble nx, GLdouble ny, GLdouble nz);
	void (*Normal3dv)(const GLdouble * v);
	void (*Normal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
	void (*Normal3fv)(const GLfloat * v);
	void (*Normal3i)(GLint nx, GLint ny, GLint nz);
	void (*Normal3iv)(const GLint * v);
	void (*Normal3s)(GLshort nx, GLshort ny, GLshort nz);
	void (*Normal3sv)(const GLshort * v);
	void (*NormalPointer)(GLenum type, GLsizei stride, const void * pointer);
	void (*Ortho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void (*PassThrough)(GLfloat token);
	void (*PixelMapfv)(GLenum map, GLint mapsize, const GLfloat * values);
	void (*PixelMapuiv)(GLenum map, GLint mapsize, const GLuint * values);
	void (*PixelMapusv)(GLenum map, GLint mapsize, const GLushort * values);
	void (*PixelStoref)(GLenum pname, GLfloat param);
	void (*PixelStorei)(GLenum pname, GLint param);
	void (*PixelTransferf)(GLenum pname, GLfloat param);
	void (*PixelTransferi)(GLenum pname, GLint param);
	void (*PixelZoom)(GLfloat xfactor, GLfloat yfactor);
	void (*PointParameterf)(GLenum pname, GLfloat param);
	void (*PointParameterfARB)(GLenum pname, GLfloat param);
	void (*PointParameterfv)(GLenum pname, const GLfloat * params);
	void (*PointParameterfvARB)(GLenum pname, const GLfloat * params);
	void (*PointParameteri)(GLenum pname, GLint param);
	void (*PointParameteriv)(GLenum pname, const GLint * params);
	void (*PointSize)(GLfloat size);
	void (*PolygonMode)(GLenum face, GLenum mode);
	void (*PolygonOffset)(GLfloat factor, GLfloat units);
	void (*PolygonStipple)(const GLubyte * mask);
	void (*PopAttrib)();
	void (*PopClientAttrib)();
	void (*PopMatrix)();
	void (*PopName)();
	void (*PrioritizeTextures)(GLsizei n, const GLuint * textures, const GLclampf * priorities);
	void (*ProgramEnvParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*ProgramEnvParameter4dvARB)(GLenum target, GLuint index, const GLdouble * params);
	void (*ProgramEnvParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*ProgramEnvParameter4fvARB)(GLenum target, GLuint index, const GLfloat * params);
	void (*ProgramEnvParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat * params);
	void (*ProgramLocalParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*ProgramLocalParameter4dvARB)(GLenum target, GLuint index, const GLdouble * params);
	void (*ProgramLocalParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*ProgramLocalParameter4fvARB)(GLenum target, GLuint index, const GLfloat * params);
	void (*ProgramLocalParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat * params);
	void (*ProgramParameteriEXT)(GLuint program, GLenum pname, GLint value);
	void (*ProgramStringARB)(GLenum target, GLenum format, GLsizei len, const void * string);
	void (*PushAttrib)(GLbitfield mask);
	void (*PushClientAttrib)(GLbitfield mask);
	void (*PushMatrix)();
	void (*PushName)(GLuint name);
	void (*RasterPos2d)(GLdouble x, GLdouble y);
	void (*RasterPos2dv)(const GLdouble * v);
	void (*RasterPos2f)(GLfloat x, GLfloat y);
	void (*RasterPos2fv)(const GLfloat * v);
	void (*RasterPos2i)(GLint x, GLint y);
	void (*RasterPos2iv)(const GLint * v);
	void (*RasterPos2s)(GLshort x, GLshort y);
	void (*RasterPos2sv)(const GLshort * v);
	void (*RasterPos3d)(GLdouble x, GLdouble y, GLdouble z);
	void (*RasterPos3dv)(const GLdouble * v);
	void (*RasterPos3f)(GLfloat x, GLfloat y, GLfloat z);
	void (*RasterPos3fv)(const GLfloat * v);
	void (*RasterPos3i)(GLint x, GLint y, GLint z);
	void (*RasterPos3iv)(const GLint * v);
	void (*RasterPos3s)(GLshort x, GLshort y, GLshort z);
	void (*RasterPos3sv)(const GLshort * v);
	void (*RasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*RasterPos4dv)(const GLdouble * v);
	void (*RasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*RasterPos4fv)(const GLfloat * v);
	void (*RasterPos4i)(GLint x, GLint y, GLint z, GLint w);
	void (*RasterPos4iv)(const GLint * v);
	void (*RasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w);
	void (*RasterPos4sv)(const GLshort * v);
	void (*ReadBuffer)(GLenum mode);
	void (*ReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
	void (*Rectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	void (*Rectdv)(const GLdouble * v1, const GLdouble * v2);
	void (*Rectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	void (*Rectfv)(const GLfloat * v1, const GLfloat * v2);
	void (*Recti)(GLint x1, GLint y1, GLint x2, GLint y2);
	void (*Rectiv)(const GLint * v1, const GLint * v2);
	void (*Rects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	void (*Rectsv)(const GLshort * v1, const GLshort * v2);
	void (*RenderbufferStorageEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	void (*RenderbufferStorageMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	GLint (*RenderMode)(GLenum mode);
	void (*ResetHistogram)(GLenum target);
	void (*ResetMinmax)(GLenum target);
	void (*Rotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	void (*Rotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	void (*SampleCoverage)(GLclampf value, GLboolean invert);
	void (*SampleCoverageARB)(GLclampf value, GLboolean invert);
	void (*Scaled)(GLdouble x, GLdouble y, GLdouble z);
	void (*Scalef)(GLfloat x, GLfloat y, GLfloat z);
	void (*Scissor)(GLint x, GLint y, GLsizei width, GLsizei height);
	void (*SecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
	void (*SecondaryColor3bEXT)(GLbyte red, GLbyte green, GLbyte blue);
	void (*SecondaryColor3bv)(const GLbyte * v);
	void (*SecondaryColor3bvEXT)(const GLbyte * v);
	void (*SecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
	void (*SecondaryColor3dEXT)(GLdouble red, GLdouble green, GLdouble blue);
	void (*SecondaryColor3dv)(const GLdouble * v);
	void (*SecondaryColor3dvEXT)(const GLdouble * v);
	void (*SecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
	void (*SecondaryColor3fEXT)(GLfloat red, GLfloat green, GLfloat blue);
	void (*SecondaryColor3fv)(const GLfloat * v);
	void (*SecondaryColor3fvEXT)(const GLfloat * v);
	void (*SecondaryColor3i)(GLint red, GLint green, GLint blue);
	void (*SecondaryColor3iEXT)(GLint red, GLint green, GLint blue);
	void (*SecondaryColor3iv)(const GLint * v);
	void (*SecondaryColor3ivEXT)(const GLint * v);
	void (*SecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
	void (*SecondaryColor3sEXT)(GLshort red, GLshort green, GLshort blue);
	void (*SecondaryColor3sv)(const GLshort * v);
	void (*SecondaryColor3svEXT)(const GLshort * v);
	void (*SecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
	void (*SecondaryColor3ubEXT)(GLubyte red, GLubyte green, GLubyte blue);
	void (*SecondaryColor3ubv)(const GLubyte * v);
	void (*SecondaryColor3ubvEXT)(const GLubyte * v);
	void (*SecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
	void (*SecondaryColor3uiEXT)(GLuint red, GLuint green, GLuint blue);
	void (*SecondaryColor3uiv)(const GLuint * v);
	void (*SecondaryColor3uivEXT)(const GLuint * v);
	void (*SecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
	void (*SecondaryColor3usEXT)(GLushort red, GLushort green, GLushort blue);
	void (*SecondaryColor3usv)(const GLushort * v);
	void (*SecondaryColor3usvEXT)(const GLushort * v);
	void (*SecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	void (*SecondaryColorPointerEXT)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	void (*SelectBuffer)(GLsizei size, GLuint * buffer);
	void (*SeparableFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
	void (*ShadeModel)(GLenum mode);
	void (*ShaderSource)(GLuint shader, GLsizei count, const GLchar * * string, const GLint * length);
	void (*ShaderSourceARB)(GLhandleARB shaderObj, GLsizei count, const GLcharARB * * string, const GLint * length);
	void (*StencilFunc)(GLenum func, GLint ref, GLuint mask);
	void (*StencilFuncSeparate)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
	void (*StencilMask)(GLuint mask);
	void (*StencilMaskSeparate)(GLenum face, GLuint mask);
	void (*StencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
	void (*StencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	void (*TexCoord1d)(GLdouble s);
	void (*TexCoord1dv)(const GLdouble * v);
	void (*TexCoord1f)(GLfloat s);
	void (*TexCoord1fv)(const GLfloat * v);
	void (*TexCoord1i)(GLint s);
	void (*TexCoord1iv)(const GLint * v);
	void (*TexCoord1s)(GLshort s);
	void (*TexCoord1sv)(const GLshort * v);
	void (*TexCoord2d)(GLdouble s, GLdouble t);
	void (*TexCoord2dv)(const GLdouble * v);
	void (*TexCoord2f)(GLfloat s, GLfloat t);
	void (*TexCoord2fv)(const GLfloat * v);
	void (*TexCoord2i)(GLint s, GLint t);
	void (*TexCoord2iv)(const GLint * v);
	void (*TexCoord2s)(GLshort s, GLshort t);
	void (*TexCoord2sv)(const GLshort * v);
	void (*TexCoord3d)(GLdouble s, GLdouble t, GLdouble r);
	void (*TexCoord3dv)(const GLdouble * v);
	void (*TexCoord3f)(GLfloat s, GLfloat t, GLfloat r);
	void (*TexCoord3fv)(const GLfloat * v);
	void (*TexCoord3i)(GLint s, GLint t, GLint r);
	void (*TexCoord3iv)(const GLint * v);
	void (*TexCoord3s)(GLshort s, GLshort t, GLshort r);
	void (*TexCoord3sv)(const GLshort * v);
	void (*TexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*TexCoord4dv)(const GLdouble * v);
	void (*TexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*TexCoord4fv)(const GLfloat * v);
	void (*TexCoord4i)(GLint s, GLint t, GLint r, GLint q);
	void (*TexCoord4iv)(const GLint * v);
	void (*TexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q);
	void (*TexCoord4sv)(const GLshort * v);
	void (*TexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	void (*TexEnvf)(GLenum target, GLenum pname, GLfloat param);
	void (*TexEnvfv)(GLenum target, GLenum pname, const GLfloat * params);
	void (*TexEnvi)(GLenum target, GLenum pname, GLint param);
	void (*TexEnviv)(GLenum target, GLenum pname, const GLint * params);
	void (*TexGend)(GLenum coord, GLenum pname, GLdouble param);
	void (*TexGendv)(GLenum coord, GLenum pname, const GLdouble * params);
	void (*TexGenf)(GLenum coord, GLenum pname, GLfloat param);
	void (*TexGenfv)(GLenum coord, GLenum pname, const GLfloat * params);
	void (*TexGeni)(GLenum coord, GLenum pname, GLint param);
	void (*TexGeniv)(GLenum coord, GLenum pname, const GLint * params);
	void (*TexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
	void (*TexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
	void (*TexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
	void (*TexParameterf)(GLenum target, GLenum pname, GLfloat param);
	void (*TexParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
	void (*TexParameteri)(GLenum target, GLenum pname, GLint param);
	void (*TexParameteriv)(GLenum target, GLenum pname, const GLint * params);
	void (*TexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
	void (*TexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
	void (*TexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
	void (*Translated)(GLdouble x, GLdouble y, GLdouble z);
	void (*Translatef)(GLfloat x, GLfloat y, GLfloat z);
	void (*Uniform1f)(GLint location, GLfloat v0);
	void (*Uniform1fARB)(GLint location, GLfloat v0);
	void (*Uniform1fv)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform1fvARB)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform1i)(GLint location, GLint v0);
	void (*Uniform1iARB)(GLint location, GLint v0);
	void (*Uniform1iv)(GLint location, GLsizei count, const GLint * value);
	void (*Uniform1ivARB)(GLint location, GLsizei count, const GLint * value);
	void (*Uniform2f)(GLint location, GLfloat v0, GLfloat v1);
	void (*Uniform2fARB)(GLint location, GLfloat v0, GLfloat v1);
	void (*Uniform2fv)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform2fvARB)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform2i)(GLint location, GLint v0, GLint v1);
	void (*Uniform2iARB)(GLint location, GLint v0, GLint v1);
	void (*Uniform2iv)(GLint location, GLsizei count, const GLint * value);
	void (*Uniform2ivARB)(GLint location, GLsizei count, const GLint * value);
	void (*Uniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void (*Uniform3fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void (*Uniform3fv)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform3fvARB)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
	void (*Uniform3iARB)(GLint location, GLint v0, GLint v1, GLint v2);
	void (*Uniform3iv)(GLint location, GLsizei count, const GLint * value);
	void (*Uniform3ivARB)(GLint location, GLsizei count, const GLint * value);
	void (*Uniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void (*Uniform4fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void (*Uniform4fv)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform4fvARB)(GLint location, GLsizei count, const GLfloat * value);
	void (*Uniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void (*Uniform4iARB)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void (*Uniform4iv)(GLint location, GLsizei count, const GLint * value);
	void (*Uniform4ivARB)(GLint location, GLsizei count, const GLint * value);
	void (*UniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix2fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix3fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix4fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	void (*UnlockArraysEXT)();
	GLboolean (*UnmapBuffer)(GLenum target);
	GLboolean (*UnmapBufferARB)(GLenum target);
	void (*UseProgram)(GLuint program);
	void (*UseProgramObjectARB)(GLhandleARB programObj);
	void (*ValidateProgram)(GLuint program);
	void (*ValidateProgramARB)(GLhandleARB programObj);
	void (*Vertex2d)(GLdouble x, GLdouble y);
	void (*Vertex2dv)(const GLdouble * v);
	void (*Vertex2f)(GLfloat x, GLfloat y);
	void (*Vertex2fv)(const GLfloat * v);
	void (*Vertex2i)(GLint x, GLint y);
	void (*Vertex2iv)(const GLint * v);
	void (*Vertex2s)(GLshort x, GLshort y);
	void (*Vertex2sv)(const GLshort * v);
	void (*Vertex3d)(GLdouble x, GLdouble y, GLdouble z);
	void (*Vertex3dv)(const GLdouble * v);
	void (*Vertex3f)(GLfloat x, GLfloat y, GLfloat z);
	void (*Vertex3fv)(const GLfloat * v);
	void (*Vertex3i)(GLint x, GLint y, GLint z);
	void (*Vertex3iv)(const GLint * v);
	void (*Vertex3s)(GLshort x, GLshort y, GLshort z);
	void (*Vertex3sv)(const GLshort * v);
	void (*Vertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*Vertex4dv)(const GLdouble * v);
	void (*Vertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*Vertex4fv)(const GLfloat * v);
	void (*Vertex4i)(GLint x, GLint y, GLint z, GLint w);
	void (*Vertex4iv)(const GLint * v);
	void (*Vertex4s)(GLshort x, GLshort y, GLshort z, GLshort w);
	void (*Vertex4sv)(const GLshort * v);
	void (*VertexAttrib1d)(GLuint index, GLdouble x);
	void (*VertexAttrib1dARB)(GLuint index, GLdouble x);
	void (*VertexAttrib1dv)(GLuint index, const GLdouble * v);
	void (*VertexAttrib1dvARB)(GLuint index, const GLdouble * v);
	void (*VertexAttrib1f)(GLuint index, GLfloat x);
	void (*VertexAttrib1fARB)(GLuint index, GLfloat x);
	void (*VertexAttrib1fv)(GLuint index, const GLfloat * v);
	void (*VertexAttrib1fvARB)(GLuint index, const GLfloat * v);
	void (*VertexAttrib1s)(GLuint index, GLshort x);
	void (*VertexAttrib1sARB)(GLuint index, GLshort x);
	void (*VertexAttrib1sv)(GLuint index, const GLshort * v);
	void (*VertexAttrib1svARB)(GLuint index, const GLshort * v);
	void (*VertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
	void (*VertexAttrib2dARB)(GLuint index, GLdouble x, GLdouble y);
	void (*VertexAttrib2dv)(GLuint index, const GLdouble * v);
	void (*VertexAttrib2dvARB)(GLuint index, const GLdouble * v);
	void (*VertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
	void (*VertexAttrib2fARB)(GLuint index, GLfloat x, GLfloat y);
	void (*VertexAttrib2fv)(GLuint index, const GLfloat * v);
	void (*VertexAttrib2fvARB)(GLuint index, const GLfloat * v);
	void (*VertexAttrib2s)(GLuint index, GLshort x, GLshort y);
	void (*VertexAttrib2sARB)(GLuint index, GLshort x, GLshort y);
	void (*VertexAttrib2sv)(GLuint index, const GLshort * v);
	void (*VertexAttrib2svARB)(GLuint index, const GLshort * v);
	void (*VertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void (*VertexAttrib3dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void (*VertexAttrib3dv)(GLuint index, const GLdouble * v);
	void (*VertexAttrib3dvARB)(GLuint index, const GLdouble * v);
	void (*VertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void (*VertexAttrib3fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void (*VertexAttrib3fv)(GLuint index, const GLfloat * v);
	void (*VertexAttrib3fvARB)(GLuint index, const GLfloat * v);
	void (*VertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
	void (*VertexAttrib3sARB)(GLuint index, GLshort x, GLshort y, GLshort z);
	void (*VertexAttrib3sv)(GLuint index, const GLshort * v);
	void (*VertexAttrib3svARB)(GLuint index, const GLshort * v);
	void (*VertexAttrib4bv)(GLuint index, const GLbyte * v);
	void (*VertexAttrib4bvARB)(GLuint index, const GLbyte * v);
	void (*VertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*VertexAttrib4dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*VertexAttrib4dv)(GLuint index, const GLdouble * v);
	void (*VertexAttrib4dvARB)(GLuint index, const GLdouble * v);
	void (*VertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*VertexAttrib4fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*VertexAttrib4fv)(GLuint index, const GLfloat * v);
	void (*VertexAttrib4fvARB)(GLuint index, const GLfloat * v);
	void (*VertexAttrib4iv)(GLuint index, const GLint * v);
	void (*VertexAttrib4ivARB)(GLuint index, const GLint * v);
	void (*VertexAttrib4Nbv)(GLuint index, const GLbyte * v);
	void (*VertexAttrib4NbvARB)(GLuint index, const GLbyte * v);
	void (*VertexAttrib4Niv)(GLuint index, const GLint * v);
	void (*VertexAttrib4NivARB)(GLuint index, const GLint * v);
	void (*VertexAttrib4Nsv)(GLuint index, const GLshort * v);
	void (*VertexAttrib4NsvARB)(GLuint index, const GLshort * v);
	void (*VertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void (*VertexAttrib4NubARB)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void (*VertexAttrib4Nubv)(GLuint index, const GLubyte * v);
	void (*VertexAttrib4NubvARB)(GLuint index, const GLubyte * v);
	void (*VertexAttrib4Nuiv)(GLuint index, const GLuint * v);
	void (*VertexAttrib4NuivARB)(GLuint index, const GLuint * v);
	void (*VertexAttrib4Nusv)(GLuint index, const GLushort * v);
	void (*VertexAttrib4NusvARB)(GLuint index, const GLushort * v);
	void (*VertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*VertexAttrib4sARB)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*VertexAttrib4sv)(GLuint index, const GLshort * v);
	void (*VertexAttrib4svARB)(GLuint index, const GLshort * v);
	void (*VertexAttrib4ubv)(GLuint index, const GLubyte * v);
	void (*VertexAttrib4ubvARB)(GLuint index, const GLubyte * v);
	void (*VertexAttrib4uiv)(GLuint index, const GLuint * v);
	void (*VertexAttrib4uivARB)(GLuint index, const GLuint * v);
	void (*VertexAttrib4usv)(GLuint index, const GLushort * v);
	void (*VertexAttrib4usvARB)(GLuint index, const GLushort * v);
	void (*VertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
	void (*VertexAttribPointerARB)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
	void (*VertexBlendARB)(GLint count);
	void (*VertexPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	void (*Viewport)(GLint x, GLint y, GLsizei width, GLsizei height);
	void (*WeightbvARB)(GLint size, const GLbyte * weights);
	void (*WeightdvARB)(GLint size, const GLdouble * weights);
	void (*WeightfvARB)(GLint size, const GLfloat * weights);
	void (*WeightivARB)(GLint size, const GLint * weights);
	void (*WeightPointerARB)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	void (*WeightsvARB)(GLint size, const GLshort * weights);
	void (*WeightubvARB)(GLint size, const GLubyte * weights);
	void (*WeightuivARB)(GLint size, const GLuint * weights);
	void (*WeightusvARB)(GLint size, const GLushort * weights);
	void (*WindowPos2d)(GLdouble x, GLdouble y);
	void (*WindowPos2dARB)(GLdouble x, GLdouble y);
	void (*WindowPos2dv)(const GLdouble * v);
	void (*WindowPos2dvARB)(const GLdouble * v);
	void (*WindowPos2f)(GLfloat x, GLfloat y);
	void (*WindowPos2fARB)(GLfloat x, GLfloat y);
	void (*WindowPos2fv)(const GLfloat * v);
	void (*WindowPos2fvARB)(const GLfloat * v);
	void (*WindowPos2i)(GLint x, GLint y);
	void (*WindowPos2iARB)(GLint x, GLint y);
	void (*WindowPos2iv)(const GLint * v);
	void (*WindowPos2ivARB)(const GLint * v);
	void (*WindowPos2s)(GLshort x, GLshort y);
	void (*WindowPos2sARB)(GLshort x, GLshort y);
	void (*WindowPos2sv)(const GLshort * v);
	void (*WindowPos2svARB)(const GLshort * v);
	void (*WindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
	void (*WindowPos3dARB)(GLdouble x, GLdouble y, GLdouble z);
	void (*WindowPos3dv)(const GLdouble * v);
	void (*WindowPos3dvARB)(const GLdouble * v);
	void (*WindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
	void (*WindowPos3fARB)(GLfloat x, GLfloat y, GLfloat z);
	void (*WindowPos3fv)(const GLfloat * v);
	void (*WindowPos3fvARB)(const GLfloat * v);
	void (*WindowPos3i)(GLint x, GLint y, GLint z);
	void (*WindowPos3iARB)(GLint x, GLint y, GLint z);
	void (*WindowPos3iv)(const GLint * v);
	void (*WindowPos3ivARB)(const GLint * v);
	void (*WindowPos3s)(GLshort x, GLshort y, GLshort z);
	void (*WindowPos3sARB)(GLshort x, GLshort y, GLshort z);
	void (*WindowPos3sv)(const GLshort * v);
	void (*WindowPos3svARB)(const GLshort * v);
};
void apple_xgl_init_direct(void);

#endif /*APPLE_XGL_API_H*/

